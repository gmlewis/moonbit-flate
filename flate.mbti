package gmlewis/flate

alias @gmlewis/io as @io

// Values
let ioeof : @io.IOError

let writer_closed_error : @io.IOError

// Types and methods
type Compressor

type Decompressor
impl Decompressor {
  close(Self) -> @io.IOError?
  read(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
}

type DeflateFast
impl Eq for DeflateFast
impl Show for DeflateFast

type DictDecoder

type DictWriter

type HCode
impl Eq for HCode
impl Show for HCode

type HuffmanBitWriter

type HuffmanDecoder

type HuffmanEncoder
impl Eq for HuffmanEncoder
impl Show for HuffmanEncoder

type LevelInfo

type LiteralNode
impl Eq for LiteralNode
impl Show for LiteralNode

type StepFunc

type StepState

type TableEntry
impl Eq for TableEntry
impl Show for TableEntry

type Token
impl Show for Token

type Writer
impl Writer {
  close(Self) -> @io.IOError?
  new(&@io.Writer) -> Self
  new_dict(&@io.Writer, @io.Slice[Byte]) -> Self
  write(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
}

impl Reader {
  new(&Self) -> Decompressor
  new_dict(&Self, @io.Slice[Byte]) -> Decompressor
}

// Type aliases

// Traits
pub(open) trait Reader {
  read(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  read_byte(Self) -> (Byte, @io.IOError?)
}

