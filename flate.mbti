package "gmlewis/flate"

import(
  "gmlewis/io"
)

// Values
let ioeof : @io.IOError

let writer_closed_error : @io.IOError

// Types and methods
type Decompressor
impl @io.Closer for Decompressor
impl @io.Reader for Decompressor

type DictWriter
impl @io.Writer for DictWriter

type Writer
fn Writer::new(&@io.Writer) -> Self
fn Writer::new_dict(&@io.Writer, @io.Slice[Byte]) -> Self
impl @io.Closer for Writer
impl @io.Writer for Writer

fn Reader::new(&Self) -> Decompressor
fn Reader::new_dict(&Self, @io.Slice[Byte]) -> Decompressor
impl @io.ByteReader for &Reader
impl @io.Reader for &Reader

// Type aliases

// Traits
pub(open) trait Reader {
  read(Self, @io.Slice[Byte]) -> (Int, @io.IOError?)
  read_byte(Self) -> (Byte, @io.IOError?)
}
impl Reader for @io.Buffer

